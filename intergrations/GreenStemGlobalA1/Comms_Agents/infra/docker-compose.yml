version: "3.9"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: comms_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-comms_db}
      POSTGRES_USER: ${POSTGRES_USER:-comms_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-comms_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-comms_user} -d ${POSTGRES_DB:-comms_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - comms_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: comms_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - comms_network

  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: comms_chromadb
    ports:
      - "${CHROMA_PORT:-8001}:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/v2/heartbeat || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - comms_network

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: comms_rabbitmq
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-comms_user}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-comms_password}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - comms_network

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: ..
      dockerfile: infra/Dockerfile
    container_name: comms_celery_worker
    command: celery -A app.celery_app worker --loglevel=info
    env_file:
      - ../env.example
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-comms_user}:${POSTGRES_PASSWORD:-comms_password}@postgres:5432/${POSTGRES_DB:-comms_db}
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER:-comms_user}:${RABBITMQ_DEFAULT_PASS:-comms_password}@rabbitmq:5672/
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - comms_network

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: ..
      dockerfile: infra/Dockerfile
    container_name: comms_celery_beat
    command: celery -A app.celery_app beat --loglevel=info
    env_file:
      - ../env.example
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-comms_user}:${POSTGRES_PASSWORD:-comms_password}@postgres:5432/${POSTGRES_DB:-comms_db}
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER:-comms_user}:${RABBITMQ_DEFAULT_PASS:-comms_password}@rabbitmq:5672/
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - comms_network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: comms_prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - comms_network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: comms_grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - comms_network

volumes:
  postgres_data:
  redis_data:
  chromadb_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  comms_network:
    driver: bridge

