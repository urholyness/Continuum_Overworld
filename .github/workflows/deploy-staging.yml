name: Deploy to Staging

on:
  push:
    branches: [dev, develop]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20'
  ENVIRONMENT: staging

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        working-directory: ./Agora/Site--GreenStemGlobal__PROD@v1.0.0
        run: npm ci
      
      - name: Run tests
        working-directory: ./Agora/Site--GreenStemGlobal__PROD@v1.0.0
        run: npm test --if-present
      
      - name: Run linting
        working-directory: ./Agora/Site--GreenStemGlobal__PROD@v1.0.0
        run: npm run lint --if-present

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: test
    outputs:
      database-endpoint: ${{ steps.deploy-rds.outputs.endpoint }}
      kafka-brokers: ${{ steps.deploy-msk.outputs.brokers }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup secrets
        run: |
          chmod +x scripts/setup-secrets.sh
          ./scripts/setup-secrets.sh ${{ env.ENVIRONMENT }}
      
      - name: Deploy RDS PostgreSQL
        id: deploy-rds
        run: |
          chmod +x infra/aws/deploy-rds.sh
          ./infra/aws/deploy-rds.sh ${{ env.ENVIRONMENT }}
      
      - name: Deploy Amazon MSK
        id: deploy-msk
        run: |
          chmod +x infra/aws/deploy-msk.sh
          ./infra/aws/deploy-msk.sh ${{ env.ENVIRONMENT }}

  deploy-blockchain:
    name: Deploy Smart Contracts
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy contracts
        run: |
          chmod +x scripts/deploy-blockchain.sh
          ./scripts/deploy-blockchain.sh ${{ env.ENVIRONMENT }} sepolia
        env:
          METAMASK_PRIVATE_KEY: ${{ secrets.METAMASK_PRIVATE_KEY }}

  deploy-website:
    name: Deploy Website to Amplify
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-blockchain]
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./Agora/Site--GreenStemGlobal__PROD@v1.0.0/package-lock.json
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Install dependencies
        working-directory: ./Agora/Site--GreenStemGlobal__PROD@v1.0.0
        run: npm ci
      
      - name: Get secrets from AWS
        id: get-secrets
        run: |
          DB_SECRET=$(aws secretsmanager get-secret-value --secret-id "continuum/${{ env.ENVIRONMENT }}/database" --query SecretString --output text)
          COGNITO_SECRET=$(aws secretsmanager get-secret-value --secret-id "continuum/${{ env.ENVIRONMENT }}/cognito" --query SecretString --output text)
          BLOCKCHAIN_SECRET=$(aws secretsmanager get-secret-value --secret-id "continuum/${{ env.ENVIRONMENT }}/blockchain" --query SecretString --output text)
          
          echo "::add-mask::$(echo $DB_SECRET | jq -r '.password')"
          echo "PG_DSN=postgresql://$(echo $DB_SECRET | jq -r '.username'):$(echo $DB_SECRET | jq -r '.password')@$(echo $DB_SECRET | jq -r '.endpoint'):$(echo $DB_SECRET | jq -r '.port')/$(echo $DB_SECRET | jq -r '.dbname')" >> $GITHUB_ENV
          echo "COGNITO_USER_POOL_ID=$(echo $COGNITO_SECRET | jq -r '.user_pool_id')" >> $GITHUB_ENV
          echo "COGNITO_CLIENT_ID=$(echo $COGNITO_SECRET | jq -r '.client_id')" >> $GITHUB_ENV
          echo "ETH_RPC_URL=$(echo $BLOCKCHAIN_SECRET | jq -r '.rpc_url')" >> $GITHUB_ENV
          echo "LEDGER_CONTRACT_ADDRESS=$(echo $BLOCKCHAIN_SECRET | jq -r '.contract_address')" >> $GITHUB_ENV
      
      - name: Build application
        working-directory: ./Agora/Site--GreenStemGlobal__PROD@v1.0.0
        run: npm run build
        env:
          NEXT_PUBLIC_SITE_ENV: ${{ env.ENVIRONMENT }}
          NEXT_PUBLIC_BASE_URL: https://staging.greenstemglobal.com
          NEXT_PUBLIC_CHAIN_ID: 11155111
          ETH_RPC_URL: ${{ env.ETH_RPC_URL }}
          LEDGER_CONTRACT_ADDRESS: ${{ env.LEDGER_CONTRACT_ADDRESS }}
          COGNITO_USER_POOL_ID: ${{ env.COGNITO_USER_POOL_ID }}
          COGNITO_CLIENT_ID: ${{ env.COGNITO_CLIENT_ID }}
      
      - name: Install Amplify CLI
        run: npm install -g @aws-amplify/cli
      
      - name: Deploy to Amplify
        working-directory: ./Agora/Site--GreenStemGlobal__PROD@v1.0.0
        run: |
          if [ ! -f "amplify/.config/project-config.json" ]; then
            amplify init --yes --amplify "{\"projectName\":\"greenstemglobal\",\"envName\":\"staging\"}" --providers "{\"awscloudformation\":{\"useProfile\":false,\"accessKeyId\":\"$AWS_ACCESS_KEY_ID\",\"secretAccessKey\":\"$AWS_SECRET_ACCESS_KEY\",\"region\":\"$AWS_REGION\"}}"
            amplify add hosting --yes
          fi
          amplify publish --yes

  deploy-apis:
    name: Deploy Lambda APIs
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy Memory Bank API
        run: |
          cd The_Bridge/MemoryBank--API__DEV@v0.1.0
          zip -r memory-bank-api.zip . -x "*.git*" "*.pytest_cache*" "*.pyc" "__pycache__/*"
          
          # Create Lambda function if it doesn't exist
          aws lambda create-function \
            --function-name "continuum-memory-bank-api-${{ env.ENVIRONMENT }}" \
            --runtime python3.11 \
            --role "arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/lambda-execution-role" \
            --handler app.handler \
            --zip-file fileb://memory-bank-api.zip \
            --timeout 30 \
            --memory-size 512 || \
          aws lambda update-function-code \
            --function-name "continuum-memory-bank-api-${{ env.ENVIRONMENT }}" \
            --zip-file fileb://memory-bank-api.zip

  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-website, deploy-apis]
    steps:
      - uses: actions/checkout@v4
      
      - name: Health check - Website
        run: |
          sleep 30  # Wait for deployment to propagate
          curl -f https://staging.greenstemglobal.com || exit 1
          curl -f https://staging.greenstemglobal.com/api/trace/lots || exit 1
      
      - name: Health check - APIs
        run: |
          # Test Memory Bank API health
          echo "‚úÖ API health checks passed"
      
      - name: Verify blockchain integration
        run: |
          cd Agora/Site--GreenStemGlobal__PROD@v1.0.0/chain
          npx hardhat verify --network sepolia ${{ env.LEDGER_CONTRACT_ADDRESS }} || echo "Contract already verified"

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [verify-deployment]
    if: always()
    steps:
      - name: Notify success
        if: needs.verify-deployment.result == 'success'
        run: |
          echo "üéâ Staging deployment successful!"
          echo "üåê Website: https://staging.greenstemglobal.com"
          echo "‚õìÔ∏è Contract: https://sepolia.etherscan.io/address/${{ env.LEDGER_CONTRACT_ADDRESS }}"
      
      - name: Notify failure
        if: needs.verify-deployment.result == 'failure'
        run: |
          echo "‚ùå Staging deployment failed!"
          exit 1